train_input: 
  data_processor: "MultimodalSimpleHDF5MapDataProcessor"
  data_dir: "./cmm_format_llava_phase_2"
  img_data_dir: "./llava/LLaVA-Instruct-150K/llava_v1_5_images"
  bos_token_id: 1
  pad_token_id: 0
  image_data_size: [3, 336, 336]
  mixed_precision: true
  transforms:
    - name: "expand_to_square"
      background_color: [122, 116, 104] # [int(255 * 0.48145466), int(255 * 0.4578275], int(255 * 0.40821073)]
    - name: "resize"
      size: 336
      interpolation: "bicubic"
    - name: "center_crop"
      size: 336
    - name: "to_tensor"
    - name: "normalize"
      mean: [0.48145466, 0.4578275, 0.40821073]
      std: [0.26862954, 0.26130258, 0.27577711]
  shuffle: True
  shuffle_seed: 274508134

  # The effective batch size, which is evenly divided across "num_csx" systems used for the run
  batch_size: 216
  micro_batch_size: 24
  drop_last: True
  num_workers: 8
  prefetch_factor: 1
  persistent_workers: True

eval_input: 
  data_processor: "MultimodalSimpleHDF5MapDataProcessor"
  data_dir: "./cmm_format_llava_phase_2"
  img_data_dir: "./llava/LLaVA-Instruct-150K/llava_v1_5_images"
  bos_token_id: 1
  pad_token_id: 0
  image_data_size: [3, 336, 336]
  mixed_precision: true
  transforms:
    - name: "expand_to_square"
      background_color: [122, 116, 104] # [int(255 * 0.48145466), int(255 * 0.4578275], int(255 * 0.40821073)]
    - name: "resize"
      size: 336
      interpolation: "bicubic"
    - name: "center_crop"
      size: 336
    - name: "to_tensor"
    - name: "normalize"
      mean: [0.48145466, 0.4578275, 0.40821073]
      std: [0.26862954, 0.26130258, 0.27577711]
  shuffle: True
  shuffle_seed: 274508134

  # The effective batch size, which is evenly divided across "num_csx" systems used for the run
  batch_size: 216
  micro_batch_size: 24
  drop_last: True
  num_workers: 8
  prefetch_factor: 1
  persistent_workers: True


model: 
  image_model_list:
    image_feature_select_mode: "patch"
    image_models:
    - image_model:
      - name: "ViTModel"
        # Embedding
        position_embedding_type: "learned"
        embedding_dropout_rate: 0.0
        hidden_size: 1024
        use_post_embed_layer_norm: True
        use_embed_proj_bias: False

        # Encoder
        num_hidden_layers: 24
        layer_norm_epsilon: 1.0e-5
        # Encoder Attn
        num_heads: 16
        attention_type: "scaled_dot_product"
        attention_softmax_fp32: True
        dropout_rate: 0.0
        nonlinearity: "quick_gelu"
        # pooler_nonlinearity: "tanh"
        attention_dropout_rate: 0.0
        use_projection_bias_in_attention: True
        use_ffn_bias_in_attention: True
        # Encoder ffn
        filter_size: 4096
        use_ffn_bias: True
        # Task-specific
        initializer_range: 0.02
        norm_first: True
        # vision related params
        image_size: [336, 336]
        num_channels: 3
        patch_size: [14, 14]
        use_conv_patchified_embedding: True
        use_encoder_pooler_layer: False
        prepend_cls_token: True
        image_layer_idx: -2

    global_image_projection:
        name: "FeedForwardNetwork"
        input_unit: 1024
        layers_units: [4096, 4096]
        layers_activation: ["gelu", null]
        use_bias: True

  text_model:
    name: "LlamaModel"
    vocab_size: 32000
    hidden_size: 4096
    position_embedding_type: "rotary"
    
    rotary_dim: 128  # hidden_size// num_heads
    share_embedding_weights: False
    embedding_layer_norm: False
    max_position_embeddings: 2048  #### MSL 2K
    pos_scaling_factor: 1.0
    embd_pdrop: 0.0

    # Decoder
    num_hidden_layers: 32
    dropout_rate: 0.0
    layer_norm_epsilon: 1.0e-5
    norm_type: "rmsnorm"

    # Decoder - Attention
    num_heads: 32
    attention_type: "scaled_dot_product"
    attention_dropout_rate: 0.0
    use_projection_bias_in_attention: False
    use_ffn_bias_in_attention: False
    
    # Decoder - ffn
    filter_size: 11008
    nonlinearity: "swiglu"
    use_ffn_bias: False

    # Task-specific
    use_bias_in_output: False
    extra_ffn_params: {'static_dual_expert': False}

  freeze: ['^image_model.image_model_list', '^text_model']

  # Loss scaling
  loss_scaling: "num_tokens"
  loss_weight: 1.0
  mixed_precision: True
  fp16_type: "cbfloat16"


optimizer:
  optimizer_type: "AdamW" # in the paper AdaFactor is used, but AdamW should be a good alternative.
  betas: [0.9, 0.999]
  eps: 1.0e-8
  weight_decay: 0.01
  max_gradient_norm: 1.0
  correct_bias: True
  learning_rate:
    - scheduler: "Linear"
      initial_learning_rate: 0.0
      end_learning_rate: 0.001
      total_iters: 100
    - scheduler: "cosinedecaylr"
      initial_learning_rate: 0.001
      end_learning_rate: 0.00005
      total_iters: 2400
  log_summaries: True
  loss_scaling_factor: "dynamic"

runconfig:
  max_steps: 2500
  log_steps: 10
  checkpoint_steps: 200
  eval_steps: 1000
  seed: 1
  max_checkpoints: 1
  save_initial_checkpoint: False
  load_checkpoint_states: model
  disable_strict_checkpoint_loading: True
